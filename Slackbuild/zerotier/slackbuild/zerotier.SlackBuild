#!/bin/bash -e

#RufusWilson revision date 2025/06/09


SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "${SCRIPT}")
SCRIPTNAME=$(basename -- "${SCRIPT}")


#Set initial variables:
PRGNAM=zerotier-one
GH_NAME=ZeroTierOne
VERSION=${VERSION:-$(cat "${SCRIPTPATH}/version")}
BUILD=${BUILD:-1}
TAG=${TAG:-_RW}
PKGTYPE=${PKGTYPE:-txz}
CWD=$(pwd)
TMP=${TMP:-/tmp}/$PRGNAM-$VERSION
PKG=$TMP/package
OUTPUT=${OUTPUT:-${SCRIPTPATH}}


# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi


if [ "$ARCH" = "i586" ]; then
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

# Delete the leftover directories if they exist (due to a previous build)
# and (re)create the packaging directory
rm -rf $PKG || exit 1
rm -rf $TMP/$GH_NAME-$VERSION || exit 1
mkdir -p $TMP $PKG $OUTPUT || exit 1
cd $TMP || exit 1

# Download the source
wget -q --show-progress --progress=bar:force:noscroll --no-check-certificate \
    "https://github.com/zerotier/ZeroTierOne/archive/refs/tags/${VERSION}.tar.gz" \
    -O $PRGNAM-$VERSION.tar.gz || exit 1

# Extract the application source in TMP
# Note: if your application comes as a tar.bz2, you need tar -jxvf
tar -zxf $PRGNAM-$VERSION.tar.gz || exit 1

# Change to the application source directory
cd $GH_NAME-$VERSION || exit 1

# Change ownership and permissions if necessary
# This may not be needed in some source tarballs, but it never hurts
chmod -R u+w,go+r-w,a-s . || exit 1

# defines certificate for cargo
export CARGO_HTTP_CAINFO=/etc/ssl/certs/ca-certificates.crt

# Compile the source, but exit if anything goes wrong
make one || exit 1

# Compile the manpages, but exit if anything goes wrong
make manpages || exit 1

# Install everything into the package directory, but exit if anything goes wrong
make install DESTDIR=$PKG || exit 1

# Strip some libraries and binaries
find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | \
    grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded || exit 1

# Remove Perl leftovers
find $PKG -name perllocal.pod \
    -o -name ".packlist" \
    -o -name "*.bs" \
    | xargs rm -f || exit 1

# Clean up manpages
mv $PKG/usr/share/man $PKG/usr/
rm -r $PKG/usr/share 2> /dev/null
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do
    ln -s $( readlink ${i} ).gz ${i}.gz
    rm $i
done

# Create verion info
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cat "${SCRIPT}" > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

# Create the ./install directory and copy the slack-desc into it
mkdir -p $PKG/install
cat ${SCRIPTPATH}/slack-desc > $PKG/install/slack-desc
if [ -f ${SCRIPTPATH}/doinst.sh ] ; then cat ${SCRIPTPATH}/doinst.sh > $PKG/install/doinst.sh; fi
if [ -f ${SCRIPTPATH}/dependees-on ]; then cat ${SCRIPTPATH}/dependees-on > $PKG/usr/doc/$PRGNAM-$VERSION/dependees-on; fi
if [ -f ${SCRIPTPATH}/slack-required ]; then cat ${SCRIPTPATH}/slack-required > $PKG/usr/doc/$PRGNAM-$VERSION/slack-required; fi
if [ -f ${SCRIPTPATH}/slack-required ]; then cat ${SCRIPTPATH}/slack-required > $PKG/install/slack-required; fi

# Defines owners and permissions
cd $PKG
chown -R root:root .
chmod -R 755 .

# Build the package
/sbin/makepkg -l y -p -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE

